# README for PDF Chat Django Project

## Project Overview

This Django project provides an API for uploading and processing multiple PDF files and querying them using AI-powered question-answering capabilities. It uses **LangChain**, **Google Generative AI**, and **FAISS** for text processing, embedding generation, and similarity search.

# video explaining the project : 
https://www.loom.com/share/03d14e92ca7f4815aaa59843b85c0236?sid=949dab6e-81d0-4891-bafa-3614c6afaec6

## Features

- **Upload and process multiple PDFs.**
- **Store and manage processed text chunks in a vector store.**
- **Query the processed data through a question-answering API.**
- **Interactive frontend for querying PDFs using Streamlit.**

## Prerequisites

- Python 3.12
- Django 5.1.1
- SQLite3 for database management (default: SQLite)
- Google Generative AI API key (gemeni-1.5-pro)
- Streamlit for frontend

## Installation

### 1. Clone the Repository
```bash
git clone https://github.com/Arhanmansoori/Backend-Assignment-for-ASE-and-SDE---1.git
cd Backend-Assignment-for-ASE-and-SDE---1
```

### 2. Set Up a Virtual Environment
```bash
python -m venv env
source env/bin/activate  # On Windows: env\Scripts\activate
```

### 3. Install Dependencies
```bash
pip install -r requirements.txt
```

### 4. Set Up the Database
Run the following commands to set up the database:
```bash
python manage.py makemigrations
python manage.py migrate
```

### 5. Configure Google Generative AI API Key
Replace the placeholder API key in the code or environment with your actual API key.

### 6. Start the Development Server
```bash
python manage.py runserver
```

### 7. Running Streamlit Application

To run the interactive Streamlit frontend, follow these steps:

1. Ensure Streamlit is installed:
   ```bash
   pip install streamlit
   ```

2. Run the Streamlit application:
   ```bash
   streamlit run project_streamlit.py
   ```

This will open a web interface where you can interact with the uploaded PDFs and ask questions about them.

## API Endpoints

### 1. **Upload PDFs**
   **Endpoint**: `http://127.0.0.1:8000/api/upload_pdf/`  
   **Method**: `POST`  
   **Description**: Upload multiple PDF files for processing.

   **Request**:
   - **Content-Type**: `multipart/form-data`
   - **Key**: `files` (can accept multiple files)

   **Response**:
   ```json
   {
       "message": "PDFs uploaded and processed successfully."
   }
   ```

### 2. **Ask a Question**
   **Endpoint**: `http://127.0.0.1:8000/api/ask_question/`  
   **Method**: `POST`  
   **Description**: Ask a question based on the content of uploaded PDFs.

   **Request**:
   ```json
   {
       "question": "What is the main topic of the document?"
   }
   ```

   **Response**:
   ```json
   {
       "answer": "The document discusses..."
   }
   ```

## Folder Structure

```
pdfchat/
│
├── models.py                # Database models for storing PDF information.
├── serializers.py           # Serializer for PDF document handling.
├── views.py                 # API views for file upload and question-answering.
├── urls.py                  # URL configuration for API endpoints.
├── project_streamlit.py      # Streamlit app for querying PDFs.
│
├── migrations/              # Django migrations folder.
├── static/                  # Static files (if any).
└── templates/               # Templates for frontend (if applicable).
```

## Usage

1. **Upload PDFs**: Use Postman or any API client to send a `POST` request to `http://127.0.0.1:8000/api/upload_pdf/` with multiple PDFs.
   
2. **Ask Questions**: After processing the PDFs, use the `/ask_question/` endpoint at `http://127.0.0.1:8000/api/ask_question/` to ask questions about the PDF content.

3. **Streamlit Interface**: After running the Streamlit application (`streamlit run project_streamlit.py`), navigate to the provided local URL to interact with the PDFs via a simple web interface.

## Notes

- **Vector Store**: The FAISS index is saved locally as `faiss_index`.
- **Temporary Files**: PDFs are processed and removed after indexing.
- **Security**: Ensure the API keys are kept secure in production environments.

## Future Improvements

- Add user authentication for secure API access.
- Implement a frontend for easier interaction.
- Use cloud storage for handling large file uploads.


## Contact

For any inquiries, please contact [arhanmansoori12345@gmail.com, 6281003819].


==> Once again Thank you!  Aviara Labs Team .